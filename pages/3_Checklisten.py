import streamlit as st
import pandas as pd
from datetime import datetime
import os
from utils.data_manager import DataManager

st.set_page_config(page_title="Labor-Checkliste", layout="wide")

st.title("üî¨ Labor-Checkliste")
st.markdown("Bitte f√ºllen Sie die Checkliste vor und nach der Arbeit im Labor aus.\nF√ºr jede Frage k√∂nnen Sie 'Ja', 'Nein' oder 'Teilweise' abhaken. Hinterlassen Sie ggf. eine Bemerkung.")

# CSS f√ºr bessere Darstellung
st.markdown("""
    <style>
    .element-container:has(> div[data-testid=\"stDataEditorContainer\"]) {
        overflow: visible !important;
    }
    table {
        font-size: 16px;
    }
    </style>
""", unsafe_allow_html=True)

# DataManager initialisieren
history_file = st.secrets["storage"]["verlaufspfad"]
data_manager = DataManager()  # Singleton + internes fs handling

# Fragen vor der Arbeit
aufgaben_vor = [
    "Laborkittel angezogen?",
    "Festes Schuhwerk angezogen?",
    "Evtl. Schutzbrille und Schutzmaske angezogen?",
    "H√§nde gewaschen/desinfiziert?",
    "Desinfektionsmittel verf√ºgbar und aufgef√ºllt?",
    "Handschuhe griffbereit?",
    "Arbeitsplatz steril?",
    "Ben√∂tigten Reagenzien bereitgestellt?",
    "Verbrauchsmaterialien aufgef√ºllt: Pipettenspitzen, R√∂hrchen, Handschuhe, Schutzmasken?",
    "Ger√§te kalibriert oder deren Stand-by-Modus gepr√ºft?",
    "Ben√∂tigten Protokolle vorbereitet?",
    "Abfallbeh√§lter leer?",
    "Tagesplan vollst√§ndig durchgelesen?",
    "√úbergabeprotokoll gelesen?",
    "Notfallausr√ºstung vorhanden?"
]

# Fragen nach der Arbeit
aufgaben_nach = [
    "Alle Oberfl√§chen desinfiziert?",
    "Reagenzien ordnungsgem√§ss zur√ºckgestellt?",
    "Alle Ger√§te ausgeschaltet oder in Stand-by gesetzt?",
    "Notwendige Wartung dokumentiert?",
    "Verbrauch von Materialien nachgetragen?",
    "Bioabf√§lle separat entsorgt?",
    "Abfallbeh√§lter geleert?",
    "Fehlende Ergebnisse gepr√ºft?",
    "√úbergabeprotokoll ausgef√ºllt?",
    "Handschuhe ausgezogen und entsorgt?",
    "Laborkittel ausgezogen?",
    "Evtl. Schutzbrille und Schutzmaske ausgezogen?",
    "H√§nde gr√ºndlich gewaschen/desinfiziert?"
]

# Funktion zur Erstellung der Checkliste
def render_checklist(tasks, key):
    df = pd.DataFrame({
        "Frage": tasks,
        "Ja": [False] * len(tasks),
        "Nein": [False] * len(tasks),
        "Teilweise": [False] * len(tasks),
        "Bemerkung": ["" for _ in tasks]
    })
    return st.data_editor(df, num_rows="fixed", use_container_width=True, key=key)

# Benutzername-Eingabe
user = st.text_input("Name der Person, die die Checkliste ausf√ºllt")

st.markdown("### üßë‚Äçüî¨ Vor der Arbeit")
df_vor = render_checklist(aufgaben_vor, "check_vor")

st.markdown("### üìã Nach der Arbeit")
df_nach = render_checklist(aufgaben_nach, "check_nach")

# Speichern der Ergebnisse mit DataManager
if st.button("‚úÖ Checkliste abschlie√üen"):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    df_vor["Zeit"] = timestamp
    df_nach["Zeit"] = timestamp
    df_vor["Benutzer"] = user
    df_nach["Benutzer"] = user
    df_vor["Bereich"] = "Vor der Arbeit"
    df_nach["Bereich"] = "Nach der Arbeit"

    df_combined = pd.concat([df_vor, df_nach], ignore_index=True)

    for _, row in df_combined.iterrows():
        data_manager.append_record(session_state_key="verlauf_df", record_dict=row.to_dict())

    st.success("Checkliste erfolgreich gespeichert!")

# Verlauf anzeigen
st.markdown("### üìú Verlaufshistorie")
data_manager.load_app_data("verlauf_df", "checkliste_verlauf.csv", initial_value=pd.DataFrame())
verlauf_df = st.session_state["verlauf_df"]
st.dataframe(verlauf_df, use_container_width=True)

